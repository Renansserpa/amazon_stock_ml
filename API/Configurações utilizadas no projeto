--
Instalado as ferramentas de desenvolvimento através de um grupo focado do poetry, evitando assim que as mesmas sejam instaladas em produção:
    poetry add --group dev ruff

No arquivo pyproject.toml foram utilizadas as linhas de configuração abaixo:
- Onde line-length é utilizado para limitar o comprimento da linha em até 79 caracteres (conforme sugerido em https://peps.python.org/pep-0008/) e também foi desconsiderada a pasta migrations uma vez que a mesma será utilizada para geração automática de código pelo Alembic.
    [tool.ruff]
    line-length = 79
    extend-exclude = ['migrations']

- É preciso especificar o que deve ser analisado estaticamente pelo ruff, onde I (Isort) é responsável pela checagem e ordenação dos imports em ordem alfabética, F (Pyflakes) é responsável por procurar erros relacionados a boas práticas de código, E (pycodestile) é responsável por erros de estilo de código, W (pycodestile) é responsável por avisos de estilo de código, PL (pylint) também é responsável por procurar erros relacionados a boas práticas de código e PT (flake8-pytest) é responsável por checagem de boas práticas do pytest.
    [tool.ruff.lint]
    preview = true
    select = ['I', 'F', 'E', 'W', 'PL', 'PT']

Para a utilização do SQL Alchemy, foi utilizada a biblioteca sqlalchemy:
    poetry add sqlalchemy

Para a geração de tokens jwt foi utilizada a biblioteca pyjwt, para a utilização do algoritmo de hashing argon2 foi necessário a biblioteca pwdlib:
    poetry add pyjwt "pwdlib[argon2]"
- Código do SQLite para criação da tabela 'Users':
CREATE TABLE users (
        id INTEGER NOT NULL,
        username VARCHAR NOT NULL,
        password VARCHAR NOT NULL,
        email VARCHAR NOT NULL,
        created_at DATETIME DEFAULT (CURRENT_TIMESTAMP) NOT NULL,
        PRIMARY KEY (id),
        UNIQUE (email),
        UNIQUE (username)
);
--
